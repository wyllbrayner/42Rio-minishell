/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_cd.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jodiniz <jodiniz@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/24 16:06:38 by jodiniz           #+#    #+#             */
/*   Updated: 2023/01/24 16:06:38 by jodiniz          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../header/ft_minishell.h"

void	ft_builtin_cd(t_minishell *sh, t_node *node)
{
	long	i;
	printf("Dentro da ft_builtin_cd | Início\n");

	i = 0;
	while (node->cmd[i])
		i++;
	printf("Dentro da ft_builtin_cd | i: %ld\n", i);
	if (i >= 3)
	{
		printf("Dentro da ft_builtin_cd | i: %ld mais de um parâmetro\n", i);
		sh->ret = -9;
		sh->erro = node->cmd[2];		
	}
	else
	{
		printf("Dentro da ft_builtin_cd | i: %ld apenas um parâmetro\n", i);
		sh->tmp0 = getcwd(NULL, 0);
		printf("Dentro da ft_builtin_cd | Apenas um parâmetro | passou da getcwd\n");
		if (!sh->tmp0)
		{
			printf("Dentro da ft_builtin_cd | Apenas um parâmetro | getcwd retornou NULL (%s)\n", sh->tmp0);
			sh->ret = -3;
			return ;
		}
		else
		{
			printf("Dentro da ft_builtin_cd | Apenas um parâmetro | getcwd retornou ponteiro (%s)\n", sh->tmp0);
			if (i == 1)
			{
				printf("Dentro da ft_builtin_cd | sem parametro | getcwd retornou ponteiro\n");
				ft_free_minishell_single_aux(sh->tmp0);
				sh->tmp0 = NULL;
				return ; //temporário até colocar a expansão das variáveis
				////expandir variável para HOME mallocando mais uma posição e colocando NULL na última posição!!!!!
			}
			if (node->cmd[1][0] == '~')
			{
				printf("Dentro da ft_builtin_cd | parâmetro = '~' | getcwd retornou ponteiro\n");
				ft_free_minishell_single_aux(sh->tmp0);
				sh->tmp0 = NULL;
				return ; //temporário até colocar a expansão das variáveis
				////expandir variável para HOME mallocando mais uma posição e colocando NULL na última posição!!!!!
			}
			else if ((node->cmd[1][0] == '\'') || (node->cmd[1][0] == '\"'))
			{
				printf("Dentro da ft_builtin_cd | Apenas um parâmetro | getcwd retornou ponteiro | node->cmd[1][0] é '\'' ou '\"'\n");
				ft_free_minishell_single_aux(sh->tmp0);
				sh->tmp0 = NULL;
				return ; ///temporário até colocar a função para retirar aspas simples e/ou duplas!!!!!
			}
			if (ft_strchr_i(node->token, '$') != 0)
			{
				printf("Dentro da ft_builtin_cd | Apenas um parâmetro | getcwd retornou ponteiro | node->cmd[1][0] é '$'\n");
				ft_free_minishell_single_aux(sh->tmp0);
				sh->tmp0 = NULL;
				// se $OLDPWD, $PWD ou $HOME -> expandir para a variável correspondente!!!
				// else
				// sh->ret = -7;
				// sh->erro = variável correspondente já expandida!!!!!
			}
			if (chdir(node->cmd[1]) == -1)
			{
				printf("Dentro da ft_builtin_cd | Apenas um parâmetro | chdir retornou -1\n");
				sh->ret = -7;
				sh->erro = node->cmd[1];
				sh->errno = 1;
				ft_free_minishell_single_aux(sh->tmp0);
				sh->tmp0 = NULL;
			}
			else
			{
				printf("Dentro da ft_builtin_cd | Apenas um parâmetro | getcwd retornou ponteiro | else final\n");
				sh->tmp1 = ft_strjoin("export OLDPWD=", sh->tmp0);
				if (!sh->tmp1)
				{
					sh->ret = -3;
					ft_free_minishell_single_aux(sh->tmp0);
					sh->tmp0 = NULL;
					return ;
				}
				printf("sh->tmp1 %s\n", sh->tmp1);
				ft_free_minishell_single_aux(sh->tmp0);
				sh->tmp0 = NULL;
				ft_free_minishell_single_aux(sh->tmp1);
				sh->tmp1 = NULL;
			}
		}
	}
	printf("Dentro da ft_builtin_cd | Fim\n");
}

/*
void	ft_builtin_cd(t_minishell *sh, t_node *node)
{
	long	i;

	printf("Dentro da ft_builtin_cd | Início\n");
	i = 0;
	while (node->cmd[i])
		i++;
	printf("Dentro da ft_builtin_cd | i: %ls\n", i);
//	if (node->cmd[2])
	if (i >= 2)
	{
		printf("Dentro da ft_builtin_cd | i: %ld mais de um parâmetro\n", i);
		sh->ret = -9;
		sh->erro = node->cmd[2];
	}
	else
	{
		printf("Dentro da ft_builtin_cd | Apenas um parâmetro\n");
		sh->tmp0 = getcwd(NULL, 0);
		printf("Dentro da ft_builtin_cd | Apenas um parâmetro | passou da getcwd\n");
		if (!sh->tmp0)
		{
			printf("Dentro da ft_builtin_cd | Apenas um parâmetro | getcwd retornou NULL\n");
			sh->ret = -3;
			return ;
		}
		else
		{
			printf("Dentro da ft_builtin_cd | Apenas um parâmetro | getcwd retornou ponteiro\n");
//			if (!node->cmd[1] || (node->cmd[1][0] == '~'))
			if (!node->cmd[1])
			{
				printf("Dentro da ft_builtin_cd | Apenas um parâmetro | getcwd retornou ponteiro | node->cmd[1] é nulo\n");
				ft_free_minishell_single_aux(sh->tmp0);
				sh->tmp0 = NULL;
				return ; //temporário até colocar a expansão das variáveis
				////expandir variável para HOME mallocando mais uma posição e colocando NULL na última posição!!!!!
			}
			else if ((node->cmd[1][0] == '\'') || (node->cmd[1][0] == '\"'))
			{
				printf("Dentro da ft_builtin_cd | Apenas um parâmetro | getcwd retornou ponteiro | node->cmd[1][0] é '\'' ou '\"'\n");
				/// retirar aspas simples e/ou duplas!!!!!
			}
			if (ft_strchr_i(node->cmd[1], '$') != 0)
			{
				// se $OLDPWD, $PWD ou $HOME -> expandir para a variável correspondente!!!
				// else
				// sh->ret = -7;
				// sh->erro = variável correspondente já expandida!!!!!
			}
			if (chdir(node->cmd[1]) == -1)
			{
				printf("Dentro da ft_builtin_cd | Apenas um parâmetro | chdir retornou NULL\n");
				sh->ret = -7;
				sh->erro = node->cmd[1];
				sh->errno = 1;
				ft_free_minishell_single_aux(sh->tmp0);
				sh->tmp0 = NULL;
			}
			else
			{
				sh->tmp1 = ft_strjoin("export OLDPWD=", sh->tmp0);
				if (!sh->tmp1)
				{
					sh->ret = -3;
					ft_free_minishell_single_aux(sh->tmp0);
					sh->tmp0 = NULL;
				}
				printf("sh->tmp1 %s\n", sh->tmp1);
				ft_free_minishell_single_aux(sh->tmp0);
				sh->tmp0 = NULL;
				ft_free_minishell_single_aux(sh->tmp1);
				sh->tmp1 = NULL;
			}
		}
	}
	printf("Dentro da ft_builtin_cd | fim\n");
//	char *getcwd(char *buf, size_t size);
//	int chdir(const char *path);
}
*/

/*
void	ft_builtin_cd(t_minishell *sh, t_node *node)
{
	char	*str;
	int 	i;
	char	string[1024];
	int		j;

	j = 0;
	i = 3;
//	str = sh->line;
	str = node->token;
	while (str[i] == ' ')
		i++;
	while(str[i])
	{
		string[j] = str[i];
		j++;
		i++; 
	}
	chdir(string);
}
*/