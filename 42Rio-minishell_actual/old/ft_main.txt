ft_main

//        sh->line = "ls -la Makefile src/ft_main.c | grep main | cat src/ft_parse.c";
//        sh->line = "ls -la Makefile src/ft_main.c | grep main | | src/ft_parse.c";
//        sh->line = "ls -la Makefile src/ft_main.c | grep main | src/ft_parse.c";




ft_parse


int ft_valid_command_aux(t_minishell *sh, char *cmd)
{
//    printf("Dentro da ft_valid_comand_aux | inicio\n");
    if (sh && cmd)
    {
        if (ft_strncmp(cmd, "echo", 5) == 0)
            return (1);
        else if (ft_strncmp(cmd, "cd", 3) == 0)
            return (1);
        else if (ft_strncmp(cmd, "pwd", 4) == 0)
            return (1);
        else if (ft_strncmp(cmd, "export", 7) == 0)
            return (1);
        else if (ft_strncmp(cmd, "unset", 6) == 0)
            return (1);
        else if (ft_strncmp(cmd, "env", 4) == 0)
            return (1);
        else if (ft_strncmp(cmd, "exit", 5) == 0)
            return (1);
        else
        {
            sh->tmp1 = ft_access_command(cmd, sh->path);
            if (!sh->tmp1)
                return (0);
            ft_free_minishell_single_aux(sh->tmp1);
            return (1);
        }
    }
//    printf("Dentro da ft_valid_comand_aux | fim\n");
    return (0);
}



int ft_valid_file(t_minishell *sh, long i)
{
    int fd;

    fd = open(sh->parse_str[i], O_WRONLY | O_CREAT, 0666);
    if (fd == -1)
        return (0);
    else
    {
        close(fd);
        return (1);
    }
}


/*
        if (!ft_valid_command_aux(sh, sh->parse_str[i]) || !ft_valid_file(sh, i))
        {
            sh->ret = -4;
            sh->erro = sh->parse_str[i];
            ft_free_minishell_double_aux(sh->tmp3);
            return ;
        }
*/

/*
int ft_pipe_or_redirect(t_minishell *sh, long i)
{
    return (sh->parse_str[i][0] == '|' || sh->parse_str[i][0] == '<' || sh->parse_str[i][0] == '>');
}
*/

int ft_pipe_or_redirect(char *cmd)
{
    return (cmd[0] == '|');
//    return (cmd[0] == '|' || cmd[0] == '<' || cmd[0] == '>');
}

//  0   1        2             3 4 5    6        7 8 9      10      11 
// ls -la Makefile src/ft_main.c | | grep Makefile > > test1.c test2.c

/*
void ft_valid_lexcal_cmd(t_minishell *sh)
{
    t_node  *tmp;

    tmp = sh->head;
    while (tmp)
    {
        if ((!tmp->prev) && (tmp->cmd[0][0] == '|'))
        {
            sh->ret = -6;
            sh->erro ="|"; 
            return ;
        }
        else if ((tmp->cmd[0][0] == '|') && (tmp->next) && (tmp->next->cmd[0][0] == '|'))
        {
            sh->ret = -6;
            sh->erro = "|";
            return ;
        }
        tmp = tmp->next;
        i++;
    }
}
*/

/*
void    ft_variable_expansion_aux(t_minishell *sh, t_node *no)
{
    long    var[4];
    long    len;
    long    caract;
    printf("Dentro da expansão de variáveis_aux - Início\n");
    var[0] = ft_strchr_i(no->cmd[0], '$');
    var[1] = ft_strlen(no->cmd[0]);
    sh->tmp1 = ft_substr(no->cmd[0], (var[0] + 1), (var[1] - var[0] - 1));
    sh->tmp2 = ft_strjoin(sh->tmp1, "=");
    printf("sh->tmp2: %s\n", sh->tmp2);
    ft_free_minishell_single_aux(sh->tmp1);
    sh->tmp1 = NULL;
    sh->tmp1 = sh->tmp2;
    sh->tmp2 = NULL;
    var[3] = FALSE;
    ft_unset_aux_1(sh, &var[2], var[0], var[1], &var[3]);
    ft_free_minishell_single_aux(sh->tmp1);
    sh->tmp1 = NULL;
    if (var[3])
    {
        printf("var[3]: %ld | var[2](i): %ld | env: %s\n", var[3], var[2], sh->env[var[2]]);
        len = ((var[0] + (ft_strlen(sh->env[var[2]]) - ft_strchr_i(sh->env[var[2]], '='))));
        sh->tmp1 = (char *)malloc(sizeof(char) * len);
        if (!sh->tmp1)
        {
            printf("Não Mallocou\n");
            sh->ret = -3;
            return;
        }
        else
        {
            printf("Mallocou %ld posições\n", len);
//            sh->tmp1[--len] = '\0';
            ft_strlcpy(sh->tmp1, no->cmd[0], var[0]);
            printf("sh->tmp1 ( antes): %s\n", sh->tmp1);
            caract = ft_strchr_i(sh->env[var[2]], '=');
            printf("sh->env[%ld]: %s | caract: %ld\n", var[2], sh->env[var[2]], caract);
            ft_strlcpy(sh->tmp1+(var[0] - 1), sh->env[var[2]]+(caract + 1), ft_strlen(no->cmd[0]));
            printf("sh->tmp1 (depois): %s\n", sh->tmp1);
        }
    }
    else
        printf("Faça alguma coisa\n");
    printf("Dentro da expansão de variáveis_aux - Fim\n");
}
*/
