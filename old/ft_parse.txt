/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_main.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: coder <coder@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/05/09 15:23:54 by woliveir          #+#    #+#             */
/*   Updated: 2022/05/09 15:09:49 by coder            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../header/ft_minishell.h"

/*
        while (sh->line[i])
        {
            while (sh->line[i] && (!((sh->line[i] == '|') && !(squote % 2) && !(dquote % 2))))
            {
                if (sh->line[i] == '\'')
                    squote++;
                else if (sh->line[i] == '\"')
                    dquote++;
                else if (sh->line[i] == '|' && !(squote % 2) && !(dquote % 2))
                    break ;
                i++;
            }
        }
*/

static void ft_count_quotes(char *cmd, long *dq)
{
    long    i;

    i = 0;
    while (cmd[i])
    {
        if (cmd[i] == '\"')
            *dq = *dq + 1;
        i++;
    }
}

static int ft_pipe_or_redirect(char *cmd, long *dq)
{
    long i;

//    printf("Dentro da ft_pipe_or_redirect cmd: %s ; *dq: %ld - Início\n", cmd, *dq);
    i = 0;
    while (cmd[i])
    {
        if (cmd[i] == '|' && ((*dq % 2) == 0))
        {
//            printf("para cmd: %s ; cmd[%li]: %c ; *dq: %ld ; resto: %ld = Retorno 1\n", cmd, i, cmd[i], *dq, (*dq % 2));
            return (1);
        }
        i++;
    }
//    printf("Dentro da ft_pipe_or_redirect cmd: %s ; *dq: %ld - Fim\n", cmd, *dq);
    return (0);
//    return (cmd[0] == '|');
//    return (cmd[0] == '|' || cmd[0] == '<' || cmd[0] == '>');
}

void ft_put_cmd_in_lst(t_minishell *sh)
{
    long    i;
    long    dq;

//    printf("Dentro da put cmd in list | inicio\n");
//     0 1   2  3        4 5    6    7     8 9  10 11    12"
//    cd | cat -e Makefile | echo "cat |o|.c | cat  > |o|.c"
    i = 0;
    dq = 0;
    while (sh->parse_str[i])
    {
        sh->tmp0 = ft_strdup(sh->parse_str[i]);
        ft_count_quotes(sh->parse_str[i], &dq);
//      testar se sh->tmp0 é null
        i++;
        if (sh->parse_str[i])
            ft_count_quotes(sh->parse_str[i], &dq);
        while (sh->parse_str[i] && !ft_pipe_or_redirect(sh->parse_str[i], &dq))
        {
            sh->tmp1 = ft_strjoin(sh->tmp0, " ");
            sh->tmp2 = ft_strjoin(sh->tmp1, sh->parse_str[i]);
            if (!sh->tmp1 || !sh->tmp2)
            {
                ft_free_minishell_single_aux(sh->tmp0);
                sh->tmp0 = NULL;
                ft_free_minishell_single_aux(sh->tmp1);
                sh->tmp1 = NULL;
                ft_free_minishell_single_aux(sh->tmp2);
                sh->tmp2 = NULL;
                sh->ret = -3;
                return ;
            }
            ft_free_minishell_single_aux(sh->tmp0);
            sh->tmp0 = sh->tmp2;
            sh->tmp2 = NULL;
            ft_free_minishell_single_aux(sh->tmp1);
            sh->tmp1 = NULL;
            i++;
//            if (sh->parse_str[i])
//                ft_count_quotes(sh->parse_str[i], &dq);
        }
        ft_list_add_last(&sh->head, ft_node_create(sh->tmp0));
        ft_free_minishell_single_aux(sh->tmp0);
        sh->tmp0 = NULL;
        if (sh->parse_str[i] && ft_pipe_or_redirect(sh->parse_str[i], &dq))
        {
            sh->tmp0 = ft_strdup(sh->parse_str[i]);
            ft_list_add_last(&sh->head, ft_node_create(sh->tmp0));
            ft_free_minishell_single_aux(sh->tmp0);
            sh->tmp0 = NULL;
        }
        if (sh->parse_str[i])
            i++;
    }
//    printf("Dentro da put cmd in list | fim\n");
}

/*
void ft_put_cmd_in_lst(t_minishell *sh)
{
    long    i;

//    printf("Dentro da put cmd in list | inicio\n");
    i = 0;
    while (sh->parse_str[i])
    {
        sh->tmp0 = ft_strdup(sh->parse_str[i]);
//      testar se sh->tmp0 é null
        i++;
        while (sh->parse_str[i] && !ft_pipe_or_redirect(sh->parse_str[i]))
        {
            sh->tmp1 = ft_strjoin(sh->tmp0, " ");
            sh->tmp2 = ft_strjoin(sh->tmp1, sh->parse_str[i]);
            if (!sh->tmp1 || !sh->tmp2)
            {
                ft_free_minishell_single_aux(sh->tmp0);
                sh->tmp0 = NULL;
                ft_free_minishell_single_aux(sh->tmp1);
                sh->tmp1 = NULL;
                ft_free_minishell_single_aux(sh->tmp2);
                sh->tmp2 = NULL;
                sh->ret = -3;
                return ;
            }
            ft_free_minishell_single_aux(sh->tmp0);
            sh->tmp0 = sh->tmp2;
            sh->tmp2 = NULL;
            ft_free_minishell_single_aux(sh->tmp1);
            sh->tmp1 = NULL;
            i++;
        }
        ft_list_add_last(&sh->head, ft_node_create(sh->tmp0));
        ft_free_minishell_single_aux(sh->tmp0);
        sh->tmp0 = NULL;
        if (sh->parse_str[i] && ft_pipe_or_redirect(sh->parse_str[i]))
        {
            sh->tmp0 = ft_strdup(sh->parse_str[i]);
            ft_list_add_last(&sh->head, ft_node_create(sh->tmp0));
            ft_free_minishell_single_aux(sh->tmp0);
            sh->tmp0 = NULL;
        }
        if (sh->parse_str[i])
            i++;
    }
//    printf("Dentro da put cmd in list | fim\n");
}
*/

//              0   1        2             3 4         5 6   7              8      
// sh->line = "ls -la Makefile src/ft_main.c | grep main | cat src/ft_parse.c";

void ft_valid_empty_cmd(t_minishell *sh)
{
    sh->tmp1 = ft_strtrim(sh->line, " ");
    if (!sh->tmp1)
    {
        sh->ret = -3;
        return ;
    }
//    else if ((ft_strlen(sh->tmp1) == 0) || ((ft_strlen(sh->tmp1) == 1) && ft_isspace(sh->tmp1[0])))
    if ((ft_strlen(sh->tmp1) == 0))
        sh->ret = -8;
    ft_free_minishell_single_aux(sh->tmp1);
}

void ft_valid_quotes(t_minishell *sh)
{
    long    i;
    long    count_s;
    long    count_d;

    if (sh)
    {
        i = 0;
        count_s = 0;
        count_d = 0;
        while (sh->line[i])
        {
            if (sh->line[i] == '\'')
                count_s++;
            else if (sh->line[i] == '\"')
                count_d++;
            i++;
        }
        if (((count_s % 2) != 0) || ((count_d % 2) != 0))
            sh->ret = -5;
    }
}

void ft_valid_redirect_out(t_minishell *sh)
{
    long    i;
    long    j;
    long    start;

    i = 0;
    start = 0;
    while (sh->line[i] && (sh->line[i] != '>'))
        i++;
    if (i < 3)
    {
        sh->ret = -6;
//        sh->erro = sh->line[i];
        return;
    }
    if (sh->line[i] == '>' && (ft_isspace(sh->line[i - 1])))
    {
        sh->out_redirect = 1;
        i++;
        if (sh->line[i] && (sh->line[i] == '>'))
        {
            sh->out_redirect = 2;
            i++;
        }
        if (sh->line[i] && (!ft_isspace(sh->line[i])))
        {
            sh->ret = -6;
            return ;
        }
        start = i;
        while (sh->line[i] && ((sh->line[i] != '|') && (sh->line[i] != '<')))
            i++;
        if (i > start)
        {
            sh->tmp1 = ft_substr(&sh->line[start], 0, (size_t)(i - (start)));
            sh->out_redirect_file = ft_split(sh->tmp1, ' ');
            ft_free_minishell_single_aux(sh->tmp1);
            if (!sh->out_redirect_file)
            {
                sh->ret = -3;
                return ;
            }
            else
            {
                while (sh->out_redirect_file[sh->out_redirect_file_fd_amount])
                    sh->out_redirect_file_fd_amount++;
                sh->out_redirect_file_fd = (int *)malloc(sizeof(int) * sh->out_redirect_file_fd_amount);
                if (!sh->out_redirect_file_fd)
                {
                    sh->ret = -3;
                    return ;
                }
                else
                {
                    j = 0;
                    while (sh->out_redirect_file[j])
                    {
                        if (sh->out_redirect == 1)
                        {
                            sh->out_redirect_file_fd[j] = open(sh->out_redirect_file[j], O_WRONLY | O_CREAT, 0666);
                            if (sh->out_redirect_file_fd[j] == -1)
                            {
                                sh->ret = -7;
                                sh->erro = sh->out_redirect_file[j];
                                return ;
                            }
                        }
                        else
                        {
                            sh->out_redirect_file_fd[j] = open(sh->out_redirect_file[j], O_WRONLY | O_CREAT | O_APPEND, 0666);
                            if (sh->out_redirect_file_fd[j] == -1)
                            {
                                sh->ret = -7;
                                sh->erro = sh->out_redirect_file[j];
                                return ;
                            }
                        }
                        j++;
                    }
                }
            }
        }
        else
            sh->ret = -6;
    }
}

/*
void ft_first_cmd(t_minishell *sh)
{
    t_node *tmp;
    long    i;
    printf("Dentro da first cmd - Início\n");
    tmp = sh->head;
    while (tmp)
    {
        sh->tmp3 = ft_split(tmp->cmd[0], ' ');
        if (!sh->tmp3)
        {
            sh->ret = -3;
            return;            
        }
        tmp->first_cmd = ft_strdup(sh->tmp3[0]);
        if (!tmp->first_cmd)
        {
            sh->ret = -3;
            return;            
        }
        printf("Nó: %s     possui first_cmd: %s\n", tmp->cmd[0], tmp->first_cmd);
        ft_free_minishell_double_aux(sh->tmp3);
        sh->tmp3 = NULL;
        sh->tmp3 = ft_split(tmp->cmd[0], ' ');
        if (!sh->tmp3)
        {
            sh->ret = -3;
            return;            
        }
        ft_free_minishell_double_aux(tmp->cmd);
        tmp->cmd = NULL;
        tmp->cmd = sh->tmp3;
        sh->tmp3 = NULL;
        tmp = tmp->next;
    }
    printf("Dentro da first cmd - Fim\n");
}
*/

void ft_valid_redirect_in(t_minishell *sh)
{
    long    i;
    long    j;
    long    start;

    i = 0;
    start = 0;
//    ft_valid_redirect_flow_aux(sh, '<');
//    if (sh-> ret < 0)
//        return ;
    while (sh->line[i] && (sh->line[i] != '<'))
        i++;
    if (i < 3)
    {
        sh->ret = -4;
//        sh->erro = sh->line[i];
        return;
    }
    if (sh->line[i] == '<' && (ft_isspace(sh->line[i - 1])))
    {
        sh->in_redirect = 1;
        i++;
        if (sh->line[i] && (sh->line[i] == '<'))
        {
            sh->in_redirect = 2;
            i++;
        }
        if (sh->line[i] && (!ft_isspace(sh->line[i])))
        {
            sh->ret = -6;
            return ;
        }
        start = i;
        while (sh->line[i] && ((sh->line[i] != '|') && (sh->line[i] != '>')))
            i++;
        if (i > start)
        {   
            sh->tmp1 = ft_substr(&sh->line[start], 0, (size_t)(i - (start)));
            sh->in_redirect_file = ft_split(sh->tmp1, ' ');
            ft_free_minishell_single_aux(sh->tmp1);
            if (!sh->in_redirect_file)
            {
                sh->ret = -3;
                return ;
            }
            else
            {
                while (sh->in_redirect_file[sh->in_redirect_file_fd_amount])
                    sh->in_redirect_file_fd_amount++;
                sh->in_redirect_file_fd = (int *)malloc(sizeof(int) * sh->in_redirect_file_fd_amount);
                if (!sh->in_redirect_file_fd)
                {
                    sh->ret = -3;
                    return ;
                }
                else
                {
                    j = 0;
                    while (sh->in_redirect_file[j])
                    {
                        if (sh->in_redirect == 1)
                        {
                            sh->in_redirect_file_fd[j] = open(sh->in_redirect_file[j], O_WRONLY | O_CREAT, 0666);
                            if (sh->in_redirect_file_fd[j] == -1)
                            {
                                sh->ret = -7;
                                sh->erro = sh->in_redirect_file[j];
                                return ;
                            }
                        }
                        else
                        {
                            sh->in_redirect_file_fd[j] = open(sh->in_redirect_file[j], O_WRONLY | O_CREAT | O_APPEND, 0666);
                            if (sh->in_redirect_file_fd[j] == -1)
                            {
                                sh->ret = -7;
                                sh->erro = sh->in_redirect_file[j];
                                return ;
                            }
                        }
                        j++;
                    }
                }
            }
        }
        else
            sh->ret = -6;
    }
}

int ft_valid_command_aux(t_minishell *sh, char *cmd)
{
    if (sh && cmd)
    {
        if (ft_strncmp(cmd, "echo", 5) == 0)
        {
//            printf("Dentro da ft_valid_command_aux | %s EXISTE\n", cmd);
            return (1);
        }
        else if (ft_strncmp(cmd, "cd", 3) == 0)
        {
//            printf("Dentro da ft_valid_command_aux | %s EXISTE\n", cmd);
            return (1);
        }

        else if (ft_strncmp(cmd, "pwd", 4) == 0)
        {
//            printf("Dentro da ft_valid_command_aux | %s EXISTE\n", cmd);
            return (1);
        }
        else if (ft_strncmp(cmd, "export", 7) == 0)
        {
//            printf("Dentro da ft_valid_command_aux | %s EXISTE\n", cmd);
            return (1);
        }
        else if (ft_strncmp(cmd, "unset", 6) == 0)
        {
//            printf("Dentro da ft_valid_command_aux | %s EXISTE\n", cmd);
            return (1);
        }
        else if (ft_strncmp(cmd, "env", 4) == 0)
        {
//            printf("Dentro da ft_valid_command_aux | %s EXISTE\n", cmd);
            return (1);
        }
        else if (ft_strncmp(cmd, "exit", 5) == 0)
        {
//            printf("Dentro da ft_valid_command_aux | %s EXISTE\n", cmd);
            return (1);
        }
//        else if (ft_strchr("-<>|\"\'", cmd[0]))
//        {
//            printf("Dentro da ft_valid_command_aux | %s NÃO É COMANDO, MAS RETORNO SERÁ = 1\n", cmd);
//            return (1);
//        }
        else
        {
            sh->tmp1 = ft_access_command(cmd, sh->path);
            if (!sh->tmp1)
            {
//                printf("Dentro da ft_valid_command_aux | %s NEXISTE\n", cmd);
                return (0);
            }
            ft_free_minishell_single_aux(sh->tmp1);
//            printf("Dentro da ft_valid_command_aux | %s EXISTE\n", cmd);
            return (1);
        }
    }
    printf("Dentro da ft_valid_command_aux | %s NEXISTE\n", cmd);
    return (0);
}

/*
void ft_valid_comand(t_minishell *sh)
{
    long    i;

    i = 0;
    while (sh->parse_str[i])
    {
        if (!ft_valid_command_aux(sh, sh->parse_str[i]))
        {
            sh->ret = -4;
            sh->erro = sh->parse_str[i];
            return ;
        }
        i++;
    }
}
*/

void ft_parse(t_minishell *sh)
{
    int i;

    if (sh)
    {
        ft_valid_empty_cmd(sh);
        if (sh->ret < 0)
            return ;
        ft_valid_quotes(sh);
        if (sh->ret < 0)
            return ;
/*
        ft_valid_redirect_out(sh);
        if (sh->ret < 0)
            return ;
        ft_valid_redirect_in(sh);
        if (sh->ret < 0)
            return ;
*/
        sh->parse_str = ft_split(sh->line, ' ');
/*
        sh->tmp3 = ft_split(sh->line, ' ');
        if (!sh->tmp3)
        {
            sh->ret = -3;
            return ;
        }
*/
//        if (!ft_valid_command_aux(sh, sh->tmp3[0]))
        if (!ft_valid_command_aux(sh, sh->parse_str[0]))
        {
            sh->ret = -4;
            sh->erro = sh->parse_str[0];
            return ;
        }
/*
        i = 0;
        while (sh->tmp3[i])
            i++;
        sh->parse_str = (char **)malloc(sizeof(char *) * (++i));
        if(!sh->parse_str)
        {
            sh->ret = -3;
            return ;
        }
        bzero(sh->parse_str, (sizeof(char *) * i));
*/
        //sh->parse_str[--i] = NULL;
//        while (--i >= 0)
//            sh->parse_str[i] = NULL;
        i = 0;
        while (sh->parse_str[i])
        {
            printf("dentro de parse | sh->parse_str[%i]: %s\n", i, sh->parse_str[i]);
            i++;
        }
//        sh->parse_str = sh->tmp3;
//        ft_valid_comand(sh);
//       if (sh->ret < 0)
//            return ;
    }
    else
        sh->ret = -1;
}

/*
void ft_put_cmd_in_lst(t_minishell *sh)
{
    long    i;

//    printf("Dentro da valide_lexcal_cmd | inicio\n");
    i = 0;
    sh->tmp3 = (char **)malloc(sizeof(char *) * 2);
    if (!sh->tmp3)
    {
        sh->ret = -3;
        return ;
    }
    sh->tmp3[0] = NULL;
    sh->tmp3[1] = NULL;
    while (sh->parse_str[i])
    {
        sh->tmp3[0] = ft_strdup(sh->parse_str[i]);
        i++;
        while (sh->parse_str[i] && !ft_pipe_or_redirect(sh->parse_str[i]))
        {
            sh->tmp1 = ft_strjoin(sh->tmp3[0], " ");
            sh->tmp2 = ft_strjoin(sh->tmp1, sh->parse_str[i]);
            if (!sh->tmp1 || !sh->tmp2)
            {
                ft_free_minishell_single_aux(sh->tmp1);
                sh->tmp1 = NULL;
                ft_free_minishell_single_aux(sh->tmp2);
                sh->tmp2 = NULL;
                ft_free_minishell_double_aux(sh->tmp3);
                sh->tmp3 = NULL;
                sh->ret = -3;
                return ;
            }
            ft_free_minishell_single_aux(sh->tmp3[0]);
            sh->tmp3[0] = sh->tmp2;
            ft_free_minishell_single_aux(sh->tmp1);
            sh->tmp2 = NULL;
            i++;
        }
        ft_list_add_last(&sh->head, ft_node_create(sh->tmp3));
        sh->tmp3[0] = NULL;
        if (sh->parse_str[i] && ft_pipe_or_redirect(sh->parse_str[i]))
        {
            sh->tmp3[0] = ft_strdup(sh->parse_str[i]);
            ft_list_add_last(&sh->head, ft_node_create(sh->tmp3));
            sh->tmp3[0] = NULL;
        }
        if (sh->parse_str[i])
            i++;
    }
    ft_free_minishell_double_aux(sh->tmp3);
//    printf("Dentro da valide_lexcal_cmd | fim\n");
}
*/


/*
char *ft_join_path(char const *path, char const *cmd)
{
    char *tmp1;
    char *tmp2;

    tmp1 = NULL;
    tmp2 = NULL;
    tmp1 = ft_strjoin(path, "/");
    if (!tmp1)
        return (NULL);
    tmp2 = ft_strjoin(tmp1, cmd);
    if (!tmp2)
    {
        ft_free_minishell_single_aux(tmp1);
        return (NULL);
    }
    return(tmp2);
}

                    int c = 0;
                    while (sh->redirect_file[z])
                    {
                        printf("sh->redirett_file[%ld]: %s\n", z, sh->redirect_file[z]);
                        c = access(sh->redirect_file[z], F_OK & W_OK);
                        if (c == 0)
                            printf("Arquivo     exite e     temos acesso de escrita ao arquivo %s | c: %c\n", sh->redirect_file[z], c);
                        else
                            printf("Arquivo não exite e não temos acesso de escrita ao arquivo %s | c: %c\n", sh->redirect_file[z], c);
                        c = access(sh->redirect_file[z], F_OK);
                        if (c == 0)
                            printf("Arquivo     exite                     : %s | c: %i\n", sh->redirect_file[z], c);
                        else
                            printf("Arquivo não exite                     : %s | c: %i\n", sh->redirect_file[z], c);
                        c = access(sh->redirect_file[z], W_OK);
                        if (c == 0)
                            printf("    temos acesso de escrita ao arquivo: %s | c: %i\n", sh->redirect_file[z], c);
                        else
                            printf("Não temos acesso de escrita ao arquivo: %s | c: %i\n", sh->redirect_file[z], c);
                        z++;
                    }
*/